//Unit 2 - Intro to variables
{
    "difficulty" : "BEGINNER",
    "lessons" : [ null, {
      "code" : "#Your code here\n\n\nprint({a})",
      "input" : [ "{a}" ],
      "output" : [ "10" ],
      "text" : "You've probably heard about variables before in math class. Remember the whole \"Given 2x=8, solve for x.\" thing? Programming has variables too. Let's try creating a variable called <b>{a}</b>.\nType <b>{a}=10</b> in the editor below."
    },
    	{
      "code" : "{a} = 0\n\n#Change the variable's value below:\n\n\nprint({a})",
      "input" : [ "" ],
      "output" : [ "5" ],
      "text" : "Giving a variable a value is called <em>assignment</em>. Sometimes we want to update a variable's value if something happens. This is fairly easy, all we have to do is <em>assign</em> it a new value.\nTry typing <b>{a} = 5</b> on line 4 below, and see what gets printed out!"
    },
    	{
      "code" : "print({a})",
      "input" : [ "" ],
      "output" : [ "NameError" ],
      "text" : "Before we can use a variable, it must be <em>instantiated</em>. This is just a big fancy word for \"created\". If you don't instantiate your variable, Python will throw an error.\nClick the run button to see what happens when we try to print the value of {a} without creating it first."
    },
    	{
      "code" : "{a} = 10\n{b} = 5\n\n#Add the two here:\nprint({a} _ {b})\n\n#Subtract the two here:\nprint({a} _ {b})\n\n#Multiply the two here:\nprint({a} _ {b})\n\n#Divide the two here:\nprint({a} _ {b})",
      "input" : [ "" ],
      "output" : [ "15", "5", "2", "50" ],
      "text" : "We can also perform <em>operations</em> with variables. Python has a lot of built in funtions to do this. The following signs can be used to perform operations:\n+ (addition), - (subtraction), * (multiplication), and / (division).\nReplace the blanks below with the correct <em>operators</em>."
    }
    ]

//Unit 5 - Arrays
{
    "difficulty" : "BEGINNER",
    "lessons" : [ null, 
      {
      "code" : "{a} = [1, 2, 3, 4]\nprint({a})",
      "input" : [ "" ],
      "output" : [ "" ],
      "text" : "Another very important datatype is the <em>array</em>. An array is basically just a list of things. Look at the code below to see how we define an array. When you think you're ready to move on, click run to move on to the next lesson."
    }, 
      {
      "code" : "",
      "input" : [ "[", "]", "{a}", "{c}", "," ],
      "output" : [ "[", "]", "{a}", "{c}", "," ],
      "text" : "In order to make an array, we put square brackets ([]) around a number of objects, which are each separated by a comma.\n Now it's your turn! Type <b>{a}=[\"{c}\", \"{d}\", \"{e}\"]</b> and then, on the next line, <b>print({a})</b>."
    },
      {
      "code" : "{a} = \nprint({a})",
      "input" : [ "[", "]", "{a}", "," ],
      "output" : [ "[", "]", ",", "'" ],
      "text" : "Until now, all of the arrays have only had one datatype in them (i.e. all strings or all integers). Let's get fancy. Make an array with at least one string and at least one integer in it. We've gotten you started below."
    },
      {
      "code" : "{a} = [1, 2, 3, 4]\nprint({a}[1])",
      "input" : [ "" ],
      "output" : [ "" ],
      "text" : "Now that you're a pro at making arrays, let's move on to <em>accessing array values</em>. Look at the code and predict what you think will happen when you click \"Run\". Then, go ahead and click it."
    },
      {
      "code" : "{a} = [1, 2, 3, 4]\n\n#Replace number with the right value in order to get the first object!\nprint({a}[number])",
      "input" : [ "[0]" ],
      "output" : [ "1" ],
      "text" : "Is that what you expected? Probably not. We can use numbers to <em>access</em> array values. If we have an array called {a}, we can ask for a value by typing {a}[number] where the number is the position of the object that you want to get.\nThe only catch is that Computer Scientists decided to count beginning with 0, so if you want to access the first object, you'll need to ask for {a}[0].\nTry to <b>print</b> the first object in the array {a} below."
    },
      {
      "code" : "{a} = [1, 2, 3, \"{b}\"]\n\n#Replace number with the right value in order to get the first object!\nprint({a}[number])",
      "input" : [ ".index" ],
      "output" : [ "3" ],
      "text" : "What if we want to find what position an object is at in our array? Thats where the index function comes in!\nTry to <b>print {a}.index(\"{b}\") in the editor below."
    },
      {
      "code" : "#Make an array called {a}. This array should contain 3 strings: \"{b}\", \"{c}\", and \"{d}\".\n\n\n\n{e} = [1, 2, 3, 4]\n#Print out the first element of {e}.\n\n\n{f} = [10, 20, \"{g}\", 40]\n#Print the index of {g} in the array {f}\n\n",
      "input" : [ ".index", "[0]", "{a}" ],
      "output" : [ "1", "'{b}'",  "'{c}'", "'{d}'", "2"],
      "text" : "Let's recap! Try following the instructions in the editor below:"
    }
    ],
    "name" : "Introduction to Arrays",
  }

//Unit 6 - Loops
{
    "difficulty" : "BEGINNER",
    "lessons" : [ null, 
      {
      "code" : "for {a} in range(0, 10):\n\tprint(str({a}) + \" \")",
      "input" : [ "" ],
      "output" : [ "" ],
      "text" : "The next big concept is loops. Loops are a very important part of programming because they make it easier to do things over and over. They also allow Computer Scientists to be lazier, and who doesn't love to be lazy?!\nNote: str(number) turns a number into a string so that we can print it more nicely.\nTry to predict what the code below will do when you run it. When you're ready, go ahead and click \"Run\" to move on."
    }, 
      {
      "code" : "for {a} in range(0, 10):\n\tprint(str({a}) + \" \")\n\nfor {a} in range(10):\n\tprint(str({a}) + \" \")\n\nfor {a} in range(0, 10, 2):\n\tprint(str({a}) + \" \")for {a} in range(10, 0, -1):\n\tprint(str({a}) + \" \")",
      "input" : [ "" ],
      "output" : [ "" ],
      "text" : "The code from the previous lesson is called a for loop. It works by running <em>for</em> a certain number of times. In Python, range is a special <em>function</em> that is very helpful for loops. Look at each of the following for loops, that each use the range function differently. When you are ready, \"Run\" to see what each of them do."
    },
     {
      "code" : "#Enter a startNumber and a stopNumber for the loop in order to make it print out the numbers 1-10. Make sure you are careful of the stopNumber-1 thing!\nfor {a} in range(_, _):\n\tprint(str({a}) + \" \")",
      "input" : [ "11", "for" ],
      "output" : [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" ],
      "text" : "Python's <em>range</em> has three different uses:\nIf you enter range(number), Python will count up from 0 until number-1. It won't get all of the way to number.\nIf you enter range(startNumber, stopNumber), then Python will start at the startNumber and end with stopNumber-1.\nIf you enter range(startNumber, stopNumber, stepNumber), then Python will do the same thing as the second case, but count up by stepNumber each time.\nNow it's your turn! Fill in the blanks below:"
    },
      {
      "code" : "#Enter a stopNumber for the loop in order to make it print out the numbers 0-5. Make sure you are careful of the stopNumber-1 thing!\nfor {a} in range(_):\n\tprint(str({a}) + \" \")",
      "input" : [ "6", "for" ],
      "output" : [ "1", "2", "3", "4", "5", "0" ],
      "text" : "Fill in the blank below. Remember that range(stopNumber) goes from 0 to stopNumber-1!"
    },
      {
      "code" : "#Enter a startNumber, stopNumber, and stepNumber for the loop in order to make it print out the even numbers from 0-10. Make sure you make stopNumber 1 more than 10.\nfor {a} in range(_, _, _):\n\tprint(str({a}) + \" \")",
      "input" : [ "2", "for" ],
      "output" : [ "2", "6", "8", "4", "10", "0" ],
      "text" : "Fill in the blank below. Remember that range(startNumber, stopNumber, stepNumber) starts at startNumber and goes up by stepNumber!\nHint: make sure stopNumber is 1 bigger than what you want it to end on."
    },
      {
      "code" : "#Enter a startNumber, stopNumber, and stepNumber for the loop in order to make it print out the even numbers from 0-10. Make sure you make stopNumber 1 more than 10.\nfor {a} in range(_, _, _):\n\tprint(str({a}) + \" \")",
      "input" : [ "for", "range" ],
      "output" : [ "" ],
      "text" : "Now the training wheels are off! Make your own loop from scratch. It can do anything you want, but make sure that you use Python's range function. Also, make sure that you <em>indent</em> (either click tab or click space 4 times) whatever code you want to be run by your loop!!"
    },
      {
      "code" : "{a} = 0\nwhile {a} < 10:\n\tprint(str({a}) + \" \")\n\t{a} = {a} + 1",
      "input" : [ "" ],
      "output" : [ "" ],
      "text" : "For loops are great, but what happens if you don't know how many times your loop is going to run? Don't worry, Python has that covered; introducing the <em>while loop</em>! Click \"Run\" below to see what the while loop does."
    },
      {
      "code" : "{a} = 1\nwhile {a}*{a} < 1000:\n\t{a} = {a} + 1\n\nprint(\"The biggest square less than 1000 is: \" + str({a}))",
      "input" : [ "" ],
      "output" : [ "" ],
      "text" : "While loops work by running until a <em>condition</em> is no longer True. We write them by typing <b>while condition: doStuff</b>. Be careful that the condition can change to False, though, because if you don't, you get an <em>infinite loop</em> which will crash your browser.\nNote: {a} = {a} + 1 just increases the value of {a} by 1.\nLook at the code below and see if you can guess what it does. Then click \"Run\"."
    },
      {
      "code" : "",
      "input" : [ "while", ":"],
      "output" : [ "" ],
      "text" : "Now it's your turn! Write a while loop that does something cool. The computer is your oyster.\nNote: remember to make sure that your while loop can end. Infinite loops will crash your browser."
    }
      {
      "code" : "#Note that \\n just makes a new line.\n{a} = [\"{b}\", \"{c}\", \"{d}\", \"{e}\", \"{f}\", \"{g}\", \"{h}\", \"{i}\" ]\nfor {j} in range(8):\n\tprint(str({a}[{j}] + \"\\n\")",
      "input" : [""],
      "output" : [ "" ],
      "text" : "Congratulations! You're now a looping master. Check out the for loop below and click \"Run\" when you're ready. When you feel ready, click finished.\nWant practice? Try to use loops to program the following:\nPrint the biggest square number less than a million.\nCount backwards from 100 (hint: use stepNumber = -1 do go down by 1 each time)."
    }
    ],
    "name" : "Introduction to Loops"
  }

{
    "difficulty" : "INTERMEDIATE",
    "lessons" : [ null, 
      {
      "code" : "for {a} in range(10):\n  print({a})",
      "input" : [ "" ],
      "output" : [ "" ],
      "text" : "Previously, we looked at loops. Here's a refresher example of a <em>for loop</em>. Click \"Run\" when you're ready to move on."
    },
      {
      "code" : "for {a} in range(3):\n  for {b} in range(10):\n    print({b})",
      "input" : [ "" ],
      "output" : [ "" ],
      "text" : "Just like <em>arrays</em>, we can put loops inside loops. We call these <em>Nested Loops</em>. Check out the code below, try to predict what will happen, and then click \"Run\" to start nesting your own loops!"
    },
      {
      "code" : "for {a} in range(3):\n  for {b} in range(10):\n    print({b})",
      "input" : [ "" ],
      "output" : [ "" ],
      "text" : "What's happening? The outer loop (with {a} in it) is running 3 times. Each time the outer loop runs, it runs the inner loop (with {b}) which runs 10 times. In total, 30 things are printed out. Try playing around with the range of the inner and outer loops, or even add another! When you are ready, move on to the next problem."
    },
      {
      "code" : "#Make the outer loop go from 1-10.\n#Make the inner loop go from 1-10.\n#Add a condition to the if statement to check if {a} equals {b}\n#If {a} equals {b}, then print their product.\nfor {a} in range(_, _):\n  for {b} in range(_, _):\n    if ({a} _ {b}):\n      print({a} _ {b})",
      "input" : [ "" ],
      "output" : [ "1", "4", "9", "16", "25", "36", "49", "64", "81", "100"],
      "text" : "Your math teacher wants to know the squares of the first 10 numbers but, because you're learning about nested loops, you decide to practice your skills. Fill in the blanks below to satisfy your math teacher."
    },
      {
      "code" : "#len(thing) gives us the length of an object (e.g. len([1,2]) = 2)\n#This is very useful when looping through arrays.\n{a} = [\"{b}\", \"{c}\", \"{d}\"]\nfor {e} in range(len({a})):\n  print({a}[{e}])",
      "input" : [ "for", "len" ],
      "output" : [ "" ],
      "text" : "Last lesson, we learned about 2D Arrays. Let's use a nested for loop to go through a 2D Array and print out each of the elements. Let's start by looping through a 1D Array. Check out the example below:"
    },
      {
      "code" : "{a} = [[\"{b}\", \"{c}\"], [\"{d}\", \"{e}\"], [\"{f}\", \"{g}\"]]\n\n#Fill in the blank to make the range equal to the length of the outer array({a}).\nfor {h} in range(_):\n\n#Fill in the blank to make range equal to length of the inner array\n#(Hint: the inner array is {a}[{h}])\n  for {i} in range(_):\n\n#Fill in the blanks to make it get the current element.\n    print({a}[_][_])",
      "input" : [ "for", "len" ],
      "output" : [ "{b}", "{c}", "{d}", "{e}", "{f}", "{g}", "[{h}]", "[{i}]" ],
      "text" : "Now, let's step it up to a 2D Array! Help fill in the blanks below to print out all of the elements of the 2D Array called {a}."
    },
      {
      "code" : "for {a} in range(1, 11):\n  {c} = \"\"\n  for {b} in range(a):\n    {c} += \"0\"\n  print({c})",
      "input" : [ "" ],
      "output" : [ "" ],
      "text" : "Seems like you've got the hang of nested loops! Click run to check out the nested for loop below, and play around to make something cool."
    }
    ],
    "name" : "Nested Loops"
  }
//Unit 10 - Bubble Sort (the finale)
  {
    "difficulty" : "HARD",
    "lessons" : [ null, 
      {
      "code" : "def bubbleSort({a}):\n  for {b} in range(len({a}-1, 0, 1):\n    for {c} in range({b}):\n      {d} = {a}[{c}]\n      {e} = {a}[{c}+1]\n      if {d} > {e}:\n        {a}[{c}] = {e}\n        {a}[{c}+1] = {d}\n  return arr\n\nprint(bubbleSort([4,3,2,5,1]))",
      "input" : [ "" ],
      "output" : [ "" ],
      "text" : "This lesson is going to be a common application of nested for loops. Before you move on with this lesson, make sure that you are good with nested for loops. When you are ready to move on, click the \"Run\" button below."
    },
      {
      "code" : "def bubbleSort({a}):\n  for {b} in range(len({a}-1, 0, 1):\n    for {c} in range({b}):\n      {d} = {a}[{c}]\n      {e} = {a}[{c}+1]\n      if {d} > {e}:\n        {a}[{c}] = {e}\n        {a}[{c}+1] = {d}\n  return arr\n\nprint(bubbleSort([4,3,2,5,1]))",
      "input" : [ "" ],
      "output" : [ "" ],
      "text" : "The program works by looping through the list and checking every two adjacent numbers. If the second number is bigger than the first, we swap the two and continue on. Each time through, we have to check one fewer pairs until eventually everything is sorted. Click \"Run\" to move on to creating your own bubbleSorter!"
    },
      {
      "code" : "#Below is a function called bubbleSort. It takes an array and returns the sorted array.\n#Start by making a loop whose range starts at length of {a}-1 and goes down by 1 until it gets to 1 (1 should be the last time).\n#Make another (inner) loop. This loop's range should be from 0 to the current value of the outer loop.\n#Let's call the current value of the inner loop {g}. Compare the {g}th and ({g)+1)th element in {a}.\n#If the first of the two is bigger, swap the values. Otherwise, don't do anything.\n#At the end of your outer loop, return the new {a}.\ndef bubbleSort({a}):\n  \n\n#Run your algorithm to see if it works!\nprint(bubbleSorter([5,4,3,2,1]))",
      "input" : [ "!.sort()", "for", "range" ],
      "output" : [ "[1, 2, 3, 4, 5]" ],
      "text" : "Leaning how to translate words and ideas into code is a big part of Computer Science and programming. Below, the instructions for writing the algorithm are given in plain English, try to code it yourself. If you get stuck, restart the lesson and take a look at the example."
    }
    ],
    "name" : "Bubble Sort"
  } 

//Unit 9 - Recursion
{
    "difficulty" : "HARD",
    "lessons" : [ null, 
      {
      "code" : "def gcd({a}, {b}):\n  {c} = min({a},{b})\n  {d} = max({a},{b})\n  if {c} == 0:\n    return {d}\n  else:\n    return gcd({c}, {d}%{c})\n\n\nprint(gcd(900, 65))",
      "input" : [ "" ],
      "output" : [ "" ],
      "text" : "Recursion is another important technique in the world of Computer Science. In this unit, we will be looking at the <a href=\"https://en.wikipedia.org/wiki/Euclidean_algorithm\">Euclidean Algorithm</a>, a very common example of recursion in programming. The Euclidean Algorithm allows us to quickly and easily find the greatest common divisor (gcd) of any two numbers. Click \"Run\" to check it out and get started."
    },
      {
      "code" : "#min({a},{b}) returns the minimum value between {a} and {b}.\nprint(min(1,2))\n#This prints 1.\n\n#max({a},{b}) returns the maximum value between {a} and {b}.\nprint(max(1,2))\n#This prints 2.\n\n#{a} % {b} returns the remainder when {a} is divided by {b}.\nprint(5 % 2)\n#This prints 1.",
      "input" : [ "" ],
      "output" : [ "" ],
      "text" : "First, let's look at some of the important built-in functions that we'll be using to make this work. Check out the code below. Click \"Run\" when you're ready to move on to the next part."
    },
      {
      "code" : "def gcd({a}, {b}):\n#assign the variable {c} the min value between {a} and {b}\n  {c} = _\n#assign the variable {d} the max value between {a} and {b}\n  {d} = _\n#check if {c} equals 0 and, if so, return the value of {d}\n  if {c} _ 0:\n    _ {d}\n  else:\n#otherwise, return the gcd of {c} and the remainder when {d} is divided by {c}.\n    return gcd({c}, {d} _ {c})\n\n\n#Let's see if it works by printing!\nprint(gcd(3432, 9000))",
      "input" : [ "" ],
      "output" : [ "24" ],
      "text" : "Fill in the blanks with the missing code, based on the given instructions."
    },
      {
      "code" : "def gcd({a}, {b}):\n  {c} = min({a},{b})\n  {d} = max({a},{b})\n  if {c} == 0:\n    return {d}\n  else:\n    return gcd({c}, {d}%{c})\n\n\nprint(gcd(900, 65))",
      "input" : [ "" ],
      "output" : [ "" ],
      "text" : "Congratulations! You've mastered the Euclidean Algorithm! Play around below and try to make your own recursive programs!"
    }
    ],
    "name" : "Recursion"
  }